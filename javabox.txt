<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BugFix Master</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100">
    <div id="app" class="min-h-screen">
        <!-- React will render here -->
    </div>

    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script type="text/babel">
        class App extends React.Component {
            state = {
                loggedIn: false,
                currentView: 'login',
                appsToScan: [],
                scanResults: []
            };

            handleLogin = (e) => {
                e.preventDefault();
                // AJAX call to Django backend
                fetch('/api/login/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        username: e.target.username.value,
                        password: e.target.password.value
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        this.setState({ loggedIn: true, currentView: 'dashboard' });
                    }
                });
            };

            startScan = (appUrl) => {
                fetch('/api/scan/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({ url: appUrl })
                })
                .then(response => response.json())
                .then(data => {
                    this.setState({ scanResults: data.results });
                });
            };

            renderLogin() {
                return (
                    <div className="max-w-md mx-auto mt-20 p-8 bg-white rounded-lg shadow-md">
                        <h2 className="text-2xl font-bold mb-6 text-center">Login</h2>
                        <form onSubmit={this.handleLogin}>
                            <div className="mb-4">
                                <label className="block text-gray-700 mb-2" htmlFor="username">Username</label>
                                <input type="text" id="username" className="w-full px-3 py-2 border rounded-lg" required />
                            </div>
                            <div className="mb-6">
                                <label className="block text-gray-700 mb-2" htmlFor="password">Password</label>
                                <input type="password" id="password" className="w-full px-3 py-2 border rounded-lg" required />
                            </div>
                            <button type="submit" className="w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600">Login</button>
                        </form>
                    </div>
                );
            }

            renderDashboard() {
                return (
                    <div className="container mx-auto p-4">
                        <h1 className="text-3xl font-bold mb-8">BugFix Master Dashboard</h1>
                        
                        <div className="mb-8">
                            <h2 className="text-xl font-semibold mb-4">Scan an Application</h2>
                            <div className="flex">
                                <input type="text" placeholder="Enter app URL" className="flex-grow px-4 py-2 border rounded-l-lg" id="appUrl" />
                                <button onClick={() => this.startScan(document.getElementById('appUrl').value)} className="bg-green-500 text-white px-6 py-2 rounded-r-lg hover:bg-green-600">Scan</button>
                            </div>
                        </div>

                        {this.state.scanResults.length > 0 && (
                            <div className="mt-8">
                                <h2 className="text-xl font-semibold mb-4">Scan Results</h2>
                                <div className="bg-white rounded-lg shadow overflow-hidden">
                                    <table className="min-w-full">
                                        <thead className="bg-gray-100">
                                            <tr>
                                                <th className="px-6 py-3 text-left">Bug Type</th>
                                                <th className="px-6 py-3 text-left">Severity</th>
                                                <th className="px-6 py-3 text-left">Location</th>
                                                <th className="px-6 py-3 text-left">Suggested Fix</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {this.state.scanResults.map((result, index) => (
                                                <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                                                    <td className="px-6 py-4">{result.bugType}</td>
                                                    <td className="px-6 py-4">
                                                        <span className={`px-2 py-1 rounded-full text-xs ${
                                                            result.severity === 'High' ? 'bg-red-100 text-red-800' :
                                                            result.severity === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                                                            'bg-green-100 text-green-800'
                                                        }`}>
                                                            {result.severity}
                                                        </span>
                                                    </td>
                                                    <td className="px-6 py-4">{result.location}</td>
                                                    <td className="px-6 py-4">{result.suggestedFix}</td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        )}
                    </div>
                );
            }

            render() {
                return (
                    <div>
                        {!this.state.loggedIn ? this.renderLogin() : this.renderDashboard()}
                    </div>
                );
            }
        }

        ReactDOM.render(<App />, document.getElementById('app'));
    </script>
</body>
</html>